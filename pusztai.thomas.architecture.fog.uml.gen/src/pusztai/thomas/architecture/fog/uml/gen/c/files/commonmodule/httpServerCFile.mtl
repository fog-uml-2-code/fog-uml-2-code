[comment encoding = UTF-8 /]
[module httpServerCFile('http://www.eclipse.org/uml2/5.0.0/UML')]

[import pusztai::thomas::architecture::fog::uml::gen::c::common::fileUtils /]

[**
 * Generates the HttpServer.c file.
*/]
[template public genHttpServerCFile(aModel : Model) {
	commonModuleSrcPath : String = commonModulePath() + '/' + cSrcPath() + '/';
}]
[file (commonModuleSrcPath + httpServerCFileName(), false, 'UTF-8')]
#include <[httpServerHFileName()/]>

struct HttpServer {
	struct _u_instance ulfiusInstance;
	bool isStarted;
};

HttpServer newHttpServer(int_t port) {
	HttpServer server = calloc(1, sizeof(struct HttpServer));
	if (ulfius_init_instance(&server->ulfiusInstance, port, NULL, NULL) != U_OK) {
		free(server);
		return NULL;
	}
	return server;
}

void deleteHttpServer(HttpServer server) {
	if (server->isStarted) {
		HttpServer_stop(server);
	}
	ulfius_clean_instance(&server->ulfiusInstance);
	free(server);
}

bool HttpServer_addEndpoint(HttpServer server, const char *httpMethod, const char *url, HttpRequestHandler handler, void *userData) {
	return ulfius_add_endpoint_by_val(&server->ulfiusInstance, httpMethod, NULL, url, 0, handler, userData) == U_OK;
}

bool HttpServer_start(HttpServer server) {
	server->isStarted = ulfius_start_framework(&server->ulfiusInstance) == U_OK;
	return server->isStarted;
}

void HttpServer_stop(HttpServer server) {
	ulfius_stop_framework(&server->ulfiusInstance);
	server->isStarted = false;
}

bool HttpServer_isStarted(HttpServer server) {
	return server->isStarted;
}

struct _u_instance *HttpServer_getUlfiusInstance(HttpServer server) {
	return &server->ulfiusInstance;
}

[/file]
[/template]

