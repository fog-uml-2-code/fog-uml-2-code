[comment encoding = UTF-8 /]
[**
 * The documentation of the module fogUml2Code.
 */]
[module fogUml2Code('http://www.eclipse.org/ocl/1.1.0/OCL/Types', 'http://www.eclipse.org/uml2/5.0.0/UML', 'http://www.eclipse.org/uml2/5.0.0/Types', 'http://www.eclipse.org/ocl/1.1.0/UML', 'http://www.eclipse.org/uml2/2.2.0/GenModel', 'http://www.eclipse.org/uml2/5.0.0/UML/Profile/Standard')]

[import pusztai::thomas::architecture::fog::uml::gen::services::fogUmlServices /]
[import pusztai::thomas::architecture::fog::uml::gen::generic::commonModule /]
[import pusztai::thomas::architecture::fog::uml::gen::generic::restControllers /]
[import pusztai::thomas::architecture::fog::uml::gen::generic::activityRealizations /]
[import pusztai::thomas::architecture::fog::uml::gen::generic::rootProject/]

[**
 * The main entry point of the FogUML to code generation.
 * 
 * The target language can be configured separately for each <<FogDevice>> stereotype application.
 * 
 * For Java, multiple Maven modules are generated from the specified UML model,
 * which are based on the Micronaut framework:
 * 	- One common module, which contains all model classes and 
 * 	  base interfaces for the REST endpoints.
 * 	- One module for each REST endpoint with a Micronaut Controller class
 *    that implements that endpoint's REST interface.
 *  - One module for each activity diagram with Micronaut Client interfaces for
 * 	  all REST endpoints used in the activity and a JSON serialized form of the 
 * 	  activity, which serves as input to the ActivityExecutionEngine, which will
 * 	  execute the activity.
 * 
 * For C, multiple CMake projects are generated from the specified UML model
 * (Please note that activity realizations in C are not supported at the moment):
 * 	- One common module, which contains all model classes and 
 * 	  base interfaces for the REST endpoints.
 * 	- One module for each REST endpoint with a REST endpoint Controller
 *    that implements that endpoint's REST interface.
 * 
 * Each REST endpoint uses the constraints implemented in the common module
 * to validate the input/actions before executing them.
 * Each activity module uses the ActivityExecution engine, which is a maven dependency,
 * to execute its activity realization.
 * 
 * To decide what should be generated from a UML element, the following rules are used:
 *  - If the element is an interface, treat it as a REST endpoint (i.e., generate a base
 * 	  interface in the common module, one Controller class in a distinct module or 
 *    an activity realization module (if the interface is part of an <<ActivityRealization>>), and
 * 	  a Client interface in each activity realization module that uses this endpoint).
 * 	- If the element is a class, which does not implement and interface
 *    and has the stereotype <<DataModel>> applied or if it resides in a package
 *    that has this stereotype applied, treat it as a model class
 *    (i.e., generate a class in the common module).
 * 	- If the element is a class, which realizes an interface, treat it as a controller
 * 	  class of a REST endpoint (i.e., use it to generate the endpoint's Controller class,
 * 	  either in the endpoint's module or in the realization module of an activity, if
 *    either the class or its package has the <<ActivityRealization>> stereotype applied).
 * 
 * 
 * Maybe we can use AOP for the ContraintValidationModule?
 * 
 * @param fogModel
 */]
[template public main(fogModel : Model)]
[comment @main/]

[fogModel.genCommonModule()/]
[fogModel.genRestControllers()/]
[fogModel.genActivityRealizations()/]
[fogModel.genRootProject()/]

[/template]
