[comment encoding = UTF-8 /]
[module restControllerMainCFile('http://www.eclipse.org/uml2/5.0.0/UML')]

[import pusztai::thomas::architecture::fog::uml::gen::c::common::fileUtils /]
[import pusztai::thomas::architecture::fog::uml::gen::services::fogUmlServices /]
[import pusztai::thomas::architecture::fog::uml::gen::c::common::classifierUtils/]
[import pusztai::thomas::architecture::fog::uml::gen::c::common::operationUtils/]
[import pusztai::thomas::architecture::fog::uml::gen::c::common::includeUtils/]

[**
 * Generates the main.c file for the module with the specified REST interface controller.
 */]
[template public genRestControllerMainCFile(restInterface : Interface, controller : Class) {
	endpointClassifier : Classifier = getDefiningClassifier(restInterface, controller);
	classifierName : String = endpointClassifier.restControllerCName();
}]
[file (endpointClassifier.restEndpointControllerModulePath() + '/' + cSrcPath() + '/' + endpointClassifier.controllerMainCPath(), false, 'UTF-8')]
[restInterface.genDefaultIncludesForRestHandler(controller)/]

int main(int argc, char *argv['[]'/]) {
	printf("REST Controller [endpointClassifier.name/] starting\n");
	HttpServer server = newHttpServer(LISTEN_PORT);
	if (!server) {
		fprintf(stderr, "Error creating HTTP server\n");
		return 1;
	}

	// Add the endpoints
	[endpointClassifier.getRestHandlerSetUpFunctionName(classifierName)/](server);

	// Start the server
	if (HttpServer_start(server)) {
		printf("REST Controller [endpointClassifier.name/] started on port %d\n", HttpServer_getUlfiusInstance(server)->port);

		// Wait for the user to press Enter to exit the program
		getchar();
	} else {
		fprintf(stderr, "Error starting server\n");
	}

	printf("Stopping server\n");
	[endpointClassifier.getRestHandlerShutdownFunctionName(classifierName)/]();
	HttpServer_stop(server);
	deleteHttpServer(server);

	return 0;
}

[/file]
[/template]


