[comment encoding = UTF-8 /]
[module restHandlerCFile('http://www.eclipse.org/uml2/5.0.0/UML')]

[import pusztai::thomas::architecture::fog::uml::gen::c::common::fileUtils /]
[import pusztai::thomas::architecture::fog::uml::gen::c::common::headerUtils/]
[import pusztai::thomas::architecture::fog::uml::gen::c::common::includeUtils/]
[import pusztai::thomas::architecture::fog::uml::gen::c::common::classifierUtils/]
[import pusztai::thomas::architecture::fog::uml::gen::c::common::attributeUtils/]
[import pusztai::thomas::architecture::fog::uml::gen::c::common::operationUtils/]
[import pusztai::thomas::architecture::fog::uml::gen::c::common::constraintUtils/]
[import pusztai::thomas::architecture::fog::uml::gen::services::fogUmlServices /]
[import pusztai::thomas::architecture::fog::uml::gen::services::cTypeServices /]
[import pusztai::thomas::architecture::fog::uml::gen::generic::restUtils/]
[import pusztai::thomas::architecture::fog::uml::gen::c::files::restcontroller::restHandlerHFile/]
[import pusztai::thomas::architecture::fog::uml::gen::c::common::jsonUtils/]

[**
 * Generates the .c file for a REST controller.
 */]
[template public genRestHandlerCFile(restInterface : Interface, controller : Class) {
	endpointClassifier : Classifier = getDefiningClassifier(restInterface, controller);
	classifierName : String = endpointClassifier.restControllerCName();
}]
[file (endpointClassifier.restEndpointControllerModulePath() + '/' + cSrcPath() + '/' + endpointClassifier.restHandlerCFilePath(), false, 'UTF-8')]

[restInterface.genDefaultIncludesForRestHandler(controller)/]

[classifierName/] restController;

bool [endpointClassifier.getRestHandlerSetUpFunctionName(classifierName)/](HttpServer server) {
	restController = [endpointClassifier.getCtorName(classifierName)/]();

	// Register all endpoints
	[for (op : Operation | restInterface.getAllOperations())]
	HttpServer_addEndpoint(server, [op.getHttpMethod()/], "[op.restEndpointCompleteUrl(restInterface)/]", &[op.restHandlerFnName(endpointClassifier)/], restController);
	[/for]
	return true;
}

void [endpointClassifier.getRestHandlerShutdownFunctionName(classifierName)/]() {
	[endpointClassifier.getDtorName(classifierName)/](restController);
	restController = NULL;
}

[for (op : Operation | restInterface.getAllOperations())]
[op.genRestHandlerFnSignature(endpointClassifier)/] {
	[classifierName/] target = ([classifierName/]) userData;
	[if (op.inputParameters()->size() > 0)]
	json_t *reqBody = HttpRequest_getJsonBody(request);
	[if (op.inputParameters()->size() > 1)][op.genMultipleParametersExtration('reqBody')/][else][op.inputParameters()->first().genSingleParameterExtraction('reqBody')/][/if]
	json_decref(reqBody);[/if]

	bool validationResult = true;
	[op.genPreConditionIfPresent()/]
	if (!validationResult) {
		goto End;
	}
[if (not op.type.oclIsUndefined())]
	[op.getReturnTypeName()/] result;
[if (not op.type.oclIsKindOf(PrimitiveType))]result = [op.type.oclAsType(Classifier).getCtorName(op.getReturnTypeName())/]();[/if]
[/if]

	bool opSuccess = [op.getGeneratedName(classifierName)/](target[op.genParameterList()/]);
	if (!opSuccess) {
		validationResult = opSuccess;
	}

	[endpointClassifier.genInvariantsIfPresent()/]
	if (validationResult) {
		[if (not op.type.oclIsUndefined())]['result'.serializeToJson(op.type, 'jsonBody', op.getReturnResult().getUpper() > 1)/][else]json_t *jsonBody = NULL;[/if]
		HttpResponse_setJsonBody(response, 200, jsonBody);
		[if (not op.type.oclIsUndefined())]json_decref(jsonBody);[/if]
	}
[if (not op.type.oclIsUndefined() and not op.type.oclIsKindOf(PrimitiveType))]
	[op.type.oclAsType(Classifier).getDtorName(op.getReturnTypeName())/](result);
[/if]

End:
	[op.genInputParametersDeletion()/]
	return validationResult ? U_CALLBACK_COMPLETE : U_CALLBACK_ERROR;
}

[/for]

[/file]
[/template]

[**
 * Extracts multiple parameters from the REST request's JSON body.
*/]
[template private genMultipleParametersExtration(op : Operation, jsonReqVar : String)]
[for (param : Parameter | op.inputParameters()) separator ('\n')][param.getTypeName()/] [param.name/][if (param.oclIsKindOf(Class))] = NULL[/if];[/for]
[for (param : Parameter | op.inputParameters()) separator ('\n')][param.extractParameter(jsonReqVar)/][/for]
[/template]

[template private extractParameter(param : Parameter, jsonReqVar : String) {
	paramName : String = param.name;
	paramJson: String = paramName + '_json';
}]
json_t *[paramJson/] = json_object_get([jsonReqVar/], "[paramName/]");
if ([paramJson/]) {
	[paramName/] = [paramJson.deserializeFromJson(param.type, param.upperBound() > 1)/];
	json_decref([paramJson/]);
	[paramJson/] = NULL;
}
[/template]

[**
 * Extracts a single parameter from the REST request's JSON body
*/]
[template private genSingleParameterExtraction(param : Parameter, jsonReqVar : String)]
[jsonReqVar.deserializeFromJson(param.type, param.name, param.upperBound() > 1)/]
[/template]

[**
 * Generates delete statements for all complex parameters.
*/]
[template private genInputParametersDeletion(op : Operation) {
	complexParams : OrderedSet(Parameter) = op.inputParameters()->select(param : Parameter | param.type.oclIsKindOf(Class));
}]
[for (param : Parameter | complexParams) separator ('\n')]if ([param.name/]) {
	[param.type.oclAsType(Class).getDtorName(param.type.oclAsType(Class).modelClassCName())/]([param.name/]);
}[/for]
[/template]

[template private genParameterList(op : Operation) {
	params : Sequence(Parameter) = op.ownedParameter->asSequence()->select(param : Parameter | param.direction <> ParameterDirectionKind::return);
}]
[for (param : Parameter | params) before(', ') separator(', ')][param.name/][/for][if (not op.type.oclIsUndefined())], [op.genResultParameter()/][/if]
[/template]

[template private genResultParameter(op : Operation)]
[if (op.type.oclIsKindOf(PrimitiveType))]&[/if]result
[/template]

[template private getHttpMethod(op : Operation) {
	params : Sequence(Parameter) = op.ownedParameter->asSequence()->select(param : Parameter | param.direction <> ParameterDirectionKind::return);
}]
[if (params->size() = 0)]GET[else]POST[/if]
[/template]
